1. По инсталацицјата на Git на мојот уред, креирав профил на Github, при што username-от кој го одбрав е klaudijastamenova.
2. По default името на гранката беше ставено на main, по направениот update сега гранката е именувана во master.
3. Во делот кај Repositories на Github при клик на копчето New се овозможува креирање на нов репозиториум, каде што се вршат поставки за името на репозиториумот кој во мојот случај го именував SI_2024_lab1_223282 и засега специфицирав да е private.
4. Со помош на командата mkdir SI_2024_lab1_223282 креирав фолдер/директориум на уредот локално. За да влезам во тукушто креираниот директориум ја искористив командата cd SI_2024_lab1_223282. git init е командата со која што го иницијализирав git.
5. Со цел да се поврзат локалниот и remote репозиториумот ја искористив командата git remote add origin https://github.com/klaudijastamenova/SI_2024_lab1_223282.git , при што овој линк е линкот од remote репозиториумот со кој сакам да се поврзам т.е SI_2024_lab1_223282 . За да бидам сигурна дека поврзувањето е успешно, ја извршив командата git remote -v, од која како output го добив следново: origin  https://github.com/klaudijastamenova/SI_2024_lab1_223282.git (fetch)
origin  https://github.com/klaudijastamenova/SI_2024_lab1_223282.git (push)
6. За креирање на датотеката ја искористив nano README.md командата по која се отвори нано едиторот каде што ги внесов своето име, презиме и индекс. Ги зачував промените со ctrl X и излегов од едиторот. Комитот го направив и му додадов порака со следниве команди: git add README.md и git commit -m "Initial commit" .
7. По преземањето на наведените фајлови, од делот Downloads на мојот уред, фајловите ги префрлив во локалниот директориум SI_2024_lab1_223282 во кој работам. Потоа ја извршив командата git add . што означува сите фајлови во директориумот во кој се наоѓаме да се додадат на stage. По ова направив нивен комит со git commit -m "Add starter code".
8. Синхронизацијата на сите гранки со оддалечениот репозиториум ја направив со командата git push --all origin.
9. Бидејќи се наоѓам на master гранката, директно ги употребив командите git branch bug1 и git branch bug2 што овозможуваат креирање на гранки кои ќе се разгрануваат од мастер гранката.
10. За да се префрлам од master кон гранката bug1 ја употребив командата git checkout bug1.
11. Локално ја поправив грешката во методот(промена од: == 0 во != 0 за да бидат исфилтрирани непарните стрингови) и фајлот премина во modified фаза. Направив негов git add и git commit -m "Fix wrong condition in filterOddLengthStrings" .
12. Префрлање на гранката bug2: git checkout bug2 .
13. По поправањето на грешката во методот makeBigStringFrom (за да бидат вклучени и стринговите со најмалку minLength должина, додадов = т.е  if(el.length <= minLength)) , направив git add и git commit -m "Fix wrong condition in makeBigStringFrom" .
14. Со цел да се вратам назад кон гранката bug1 ја искористив командата git checkout bug1 .
15. Повикот на методот го направив во линија број 16, направив git add SILab1Main.java и git commit -m "Call method filterOddLengthStrings in main class" .
16. Назад кон гранката bug2: git checkout bug2 .
17. На гранката bug2, во фајлот со main класата, додадов повик на методот makeBigStringFrom и направив git add SILab1Main.java и git commit -m "Call method makeBigStringFrom in main class" .
18. Со командата git push --all origin се овозможува синхронизација на сите гранки, со ова bug1 и bug2 се додадоа како гранки на remote репозиториумот.
19. За префрлање на мастер гранката ја извршив командата: git checkout master .
20. Бидејќи се наоѓам на master, спојувањето на bug1 е директно со командата git merge bug1 . Конфликти не настанаа, спојувањето е успешно извршено со стратегијата Fast-forward.
21. Повторно за синхронизација на гранките одам со командата git push --all origin .
22. Кон гранката bug2: git checkout bug2 .
23. Ја употребив командата git rebase master, се случи конфликт бидејќи во иста линија на код беа повикувани два различни методи. Со командата nano SILab1Main.java го отворив конфликтниот фајл и го разрешив конфликтот така што го избришав повикот кон методот filterOddLengthStrings, а го задржав повикот кон методот makeBigStringFrom. По ова ја извршив командата git add SILab1Main.java и го продолжив извршувањето на rebase командата со git rebase --continue. По овие извршени чекори добив порака дека е успешно извршен rebase-от. 
24. За да се префрлам кон гранката мастер, ја искористив командата git checkout master.
25. Спојувањето на гранката bug2 кон гранката мастер го извршив со командата: git merge bug2 и притоа не настанаа никакви конфликти, спојувањето беше извршено по стратегијата Fast-forward.
26. На овој чекор ја извршив командата git push --all origin и притоа добив порака rejected за гранката bug2. Преминав на чекор 27.
27. Како што наведов во претходниот чекор, git push --all origin за гранката bug2 не функционираше, ја искористив командата git push --force origin bug2 со која ги наметнав промените кои се направени локално.
28. За да ги ископирам git логовите ја искористив командата git log > logs.txt , која излезот од git log-овите ќе го запише во новокреиран txt фајл (logs.txt). Датотекава во која ја водев документацијата за чекорите, локално ќе ја поставам во фолдерот во кој работам и на овие две датотеки ќе им повикам git add и git commit со порака "Final commit".
29. Синхронизацијата на сите гранки ја извршувам со: git push --all origin .